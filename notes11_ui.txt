------------------------------------------------------------------------------
LESSON 11 - Completing the UI
------------------------------------------------------------------------------

	https://developer.android.com/guide/topics/ui/overview.html

	
Views and ViewGroups
--------------------

      ----------
      |  View  |*-------
      ----------       |    
		   A           |
		   |           |
		   |           |
		   |           |
           |           |
    ---------------    |
	|  ViewGroup  |-----
    ---------------

	FrameLayout - Views are placed on the top left corner and are overwritten in order
	LinearLayout - Places Views in a row (or column). Views can have a size 0dp and a layout_weight - Androif calculates the size in the LinearLayout direction, finds the free space, and distributes it to the views with 0dp and a weight, in porportion to the weights.
	RelativeLayout - Allow to allign the views to the left, right top, bottom of the parent (corners, center) and to specify alignment relationships between views
	GridLayout - Places elements in a grid (elements can ocupy several cells)
	ConstraintLayout - Uses constraints to specify placement of views relative to other views, and relative scaling

ViewAttributes
--------------

	witdth, height -> match_parent | wrap_content | 12dp
	graviry -> center | left | right | top | bottom (applies to the contents of the view)
	layout_graviry -> center | left | right | top | bottom (tell the parent layout where to place this view)
	padding -> inside the view, and applies to the view ()
	layout_margin ->
	visibility -> visible (shown) | invisible (not shown but takes space an affects layout) | gone (not shown, and does not take space/affetc layout)
	
	
-----------------
ConstraintLayout
-----------------

	dependencies {
		compile 'com.android.support.constraint:constraint-layout:1.0.2'
	}

    <android.support.constraint.ConstraintLayout
		xmlns:app="http://schemas.android.com/apk/res-auto"
		xmlns:tools="http://schemas.android.com/tools"
		xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent">
		
		<!-- ... -->
		

	</android.support.constraint.ConstraintLayout>

	
BASE SERVICE CLASS
------------------
	
	
	<TextView
        android:id="@+id/textViewPassengerLabel"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/passenger_label"
        app:layout_constraintTop_toTopOf="parent"
        android:layout_marginTop="16dp"
        android:layout_marginLeft="16dp"
        app:layout_constraintLeft_toLeftOf="parent"
        android:textAppearance="@style/TextAppearance.AppCompat.Caption"/>

    <TextView
        android:id="@+id/textViewPassengerName"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        tools:text="@string/passenger_name"
        android:layout_marginTop="8dp"
        app:layout_constraintTop_toBottomOf="@+id/textViewPassengerLabel"
        android:layout_marginLeft="0dp"
        app:layout_constraintLeft_toLeftOf="@+id/textViewPassengerLabel"
        android:textColor="@color/colorPrimary"
        android:textAppearance="@style/TextAppearance.AppCompat.Display1"/>
		
	<ImageView
		android:id="@+id/divider"
		android:background="@color/colorPrimaryLight"
		android:layout_height="1dp"
		android:layout_width="0dp"
		app:layout_constraintLeft_toRightOf="@+id/leftRectangle"
		app:layout_constraintRight_toLeftOf="@+id/rightRectangle"
		app:layout_constraintTop_toBottomOf="@+id/rightRectangle"
		app:layout_constraintBottom_toTopOf="@+id/rightRectangle"
		app:layout_constraintHorizontal_bias="0.0"/>

Tips:
	- Use tools:text="..." instead of android:text="" for textViews that have dynamic text (that will be replace at run time) this will help designers and won't show up at run time)
    - android:textColor="@color/colorPrimary"
	- android:textColor="@color/colorPrimaryLight"
	- android:textColor="@android:color/black"
	- android:textColor="@android:color/white"
	- android:textColor="@color/colorGood"
	- android:textColor="@color/colorBad"
    - android:textAppearance="@style/TextAppearance.AppCompat.Large"
    - android:textAppearance="@style/TextAppearance.AppCompat.Display1"
	- android:textAppearance="@style/TextAppearance.AppCompat.Display2"
    - android:textAppearance="@style/TextAppearance.AppCompat.Caption"
	- android:textAppearance="@style/TextAppearance.AppCompat.Headline"
	- android:letterSpacing="0.5"
	- android:letterSpacing="0.3"
	- android:background="@drawable/shape_rectangle_stroke"
	- android:background="@color/colorPrimary"
	- android:background="@color/colorPrimaryLight"
	- app:layout_constraintHorizontal_bias="0.0"
	- 
	

-------------	
Vector Assets
-------------

res -> New -> Vector Asset ... will appear under drawables

resource is in xml and can edit and change values to resource strings (ex: <path android:fillColor="@color/colorPrimaryLight"  ...)


----------------
Hierarchy Viewer
----------------

Tools -> Android -> Android Device Monitor
Window -> Open Perspective -> Hierarchy View

No more that 80 Views per layout
No more that 10 nested ViewGoups per layout


------------
Data Binding
------------

	https://developer.android.com/topic/libraries/data-binding/index.html
	
 - Enable data binding in build.gradle (module)
 - Add <layout> as the root tag in the UI
 - Create a binding instance
 - Set the content view using the DatabindingUtil
 - Bind each attribute in the views to the cooresponding data

Enable data binding in build.gradle (module)
--------------------------------------------

	dataBinding {
		enabled = true
	}
	
	or
	
	dataBinding.enabled = true;
	
Add <layout> as the root tag in the UI
--------------------------------------

Android generates a binding class for every layout that has <layout> as its root.

	<layout xmlns:app="http://schemas.android.com/apk/res-auto"
		xmlns:tools="http://schemas.android.com/tools"
		xmlns:android="http://schemas.android.com/apk/res/android">
	 
	</layout>
 
After adding the <> tag, rebuild the project that Android generates the binding classes.

It uses the name of the layout.xml file, converted from snake to camel case, with the word binding in the end:

	activity_main.xml -> ActivityMainBinding


Create a binding instance
-------------------------

	ActivityMainBinding mBinding;
	
Set the content view using the DatabindingUtil
----------------------------------------------

    mBinding = DataBindingUtil.setContentView(this, R.layout.activity_main);

Bind each attribute in the views to the cooresponding data
----------------------------------------------------------

	mBinding.textViewPassengerName.setText(info.passengerName);
	mBinding.textViewOriginAirport.setText(info.originCode);

-----------------
Responsive Design
-----------------

We can create an alternate layout for landscape mode. Place it in:

	res/layout-land

Common elements can be placed in separate layout files, and included (using the <include> tag) 
in each parent layout (normal and landscape)

	right click res -> New ... -> Layout Resource File -> ... layout_component1.xml

in each parent layout:

	<include 
		android:id="+id/comp_id"
		layout="@layout/layout_component1"
		android:layout_width="0dp"
		android:layout_height="wrap_content"
		...
	/>

NOTE - use the layout attribute instead of android:layout
	
-------------
Accessibility
-------------

String resources:

	<resources xmlns:xliff="http://schemas.android.com/apk/res-auto">

	<string name="condition_2xx">Storm</string>
    <string name="a11y_forecast">Forecast: <xliff:g id="condition">%1$s</xliff:g></string>

In Code:

	String description = mContext.getString(R.string.condition_2xx);
	forecastAdapterViewHolder.textViewWeatherText.setText(description);
    forecastAdapterViewHolder.textViewWeatherText.setContentDescription(mContext.getString(R.string.a11y_forecast, description));

---	
	
Accessibility refers to the design of products, devices, services, or environments for people 
who experience disabilities. Android provides accessibility features like

TalkBack which is a pre-installed screen reader service provided by Google. It uses spoken 
feedback to describe the results of actions such as launching an app, and events such as notifications.
Explore by Touch which is a system feature that works with TalkBack, allowing you to touch 
your device's screen and hear what's under your finger via spoken feedback. This feature is 
helpful to users with low vision.
Accessibility settings that let you modify your device's display and sound options, such as 
increasing the text size, changing the speed at which text is spoken, and more. and more.
To take full advantage of those features, you should follow this checklist listed here from 
the android developer website, but let’s focus on the first one for now which is the most important.

Describe user interface controls

If you look at our layout design for the boarding pass, you can immediately tell that our origin 
airport is JFK and the destination airport is DCA, simply because of their relative location on 
the screen and the direction of the plane. But if you cannot see this layout due to a visual 
limitation, simply having android read out everything on the screen won’t tell you enough 
information about which is which.


That’s why Android offers the contentDescription attribute to describe what any view actually 
presents, this description text is not displayed anywhere on the screen, but if the user enables 
accessibility services that provide audible prompts, then when the user navigates to that control, 
the text is spoken.

	<ImageView android:contentDescription="@string/origin_label"/>

Ideally, in any app, you would want to describe all ImageViews, ImageButtons and all 
Checkboxes using the contentDescription attribute.

ContentDescription is just one of many things you need to consider when building your app for 
accessibility, others include:

	- Enable focus-based navigation which makes sure users can navigate your screen layouts using 
	external hardware like bluetooth keyboards.
	- No audio-only feedback which guarantees any audio feedback to always have a secondary feedback 
	mechanism to support users who are deaf or hard of hearing

For the full check list and best practices follow this link:

	https://developer.android.com/guide/topics/ui/accessibility/checklist.html#recommendations

--------------------

    <string name="format_pressure"><xliff:g id="pressure">%1.0f</xliff:g> hPa</string>
    <string name="a11y_forecast">Forecast: <xliff:g id="condition">%1$s</xliff:g></string>
    <string name="a11y_forecast_icon">Forecast icon: <xliff:g id="condition">%1$s</xliff:g></string>
    <string name="a11y_high_temp">High: <xliff:g id="high">%1$s</xliff:g></string>
    <string name="a11y_low_temp">Low: <xliff:g id="low">%1$s</xliff:g></string>
    <string name="a11y_humidity">Humidity: <xliff:g id="humidity">%1$s</xliff:g></string>
    <string name="a11y_pressure">Barometric Pressure: <xliff:g id="pressure">%1$s</xliff:g></string>
    <string name="a11y_wind">Wind speed and direction: <xliff:g id="wind">%1$s</xliff:g></string>

	
    float pressure = data.getFloat(INDEX_WEATHER_PRESSURE);
	String pressureString = getString(R.string.format_pressure, pressure);
	String pressureStringA11y = getString(R.string.a11y_pressure,pressureString);
	mDetailBinding.compExtraWeatherInfo.pressure.setText(pressureString);
	mDetailBinding.compExtraWeatherInfo.pressure.setContentDescription(pressureStringA11y);
	mDetailBinding.compExtraWeatherInfo.pressureLabel.setContentDescription(pressureStringA11y);

	

---------------------------
Localization
---------------------------


Localization (also known as Internationalization) is the adaptation of a product or service
 to meet the needs of a particular language, culture or desired population's "look-and-feel".

Translation
-----------

You should always design your app in a way that can be easily translated to other 
languages. To do so, any text that you would expect to be translated like labels and 
titles and button descriptions should all be defined as a string resource in res/values/strings.xml

This allows you to create other versions of strings.xml for other languages. This is 
done by creating a new values folder with the pattern value-xx where xx can be the abbreviation 
of any language from the ISO 639 code list here, for example res/values-fr/strings.xml will contain 
the french version of the strings.xml file with all the strings translated from the default 
language to french.

This way, when a user who has set up their phone to use french as the default language, android
 will automatically load the french version of strings and use all the pre-translated french labels.

	NOTE: Once a new values-xx folder is created, android displays all resource files grouped together.
  
Sometimes however, you would still want to use the strings recourses for strings that you don't 
intend to translate, this includes strings representing identifiers for views or variable names os 
string formats etc.

For those strings, there's an attribute called translatable that can be set to false to indicate 
that this string recourse should not be translated.

	<string name="timeFormat" translatable="false">hh:mm a</string>


	
RTL support
-----------

If you’re distributing to countries where right-to-left (RTL) scripts are 
used (like Arabic or Hebrew), you should consider implementing support for RTL layouts 
and text display and editing, to the extent possible.

You've already seen how to set image recourses to flip when RTL support activated 
to indicate the correct direction of travel using

	<vector android:autoMirrored="true"> </vector>

Another set of attributes related to RTL support are the

	android:layout_marginStart
	android:layout_marginEnd

that correspond to

	android:layout_marginLeft
	android:layout_marginRight

respectively, but only when the default language is English (or any LTR language), 
for RTL languages however, Start is mapped to Right and End is mapped to Left instead, 
the idea is that when the app runs on a device with a default RTL language , 
everything will get mirrored by switching margins and constraints to the other side.

Keep in mind that these Start and End attributes are relatively new, so to support 
older devices (prior to 4.1) you should still backup the Start and End margins with 
the outdated Left and Right ones with the same values, and if your app ends up running 
on a more recent device the Left Right margins are ignored and the Start End ones 
are used instead.


This Localization Checklist offers some more important steps you should follow to make 
your Android app run on many devices in many regions and hence reach the most users.

	https://developer.android.com/distribute/best-practices/launch/localization-checklist.html
	
	
--------------------
ListView Tips
--------------------


<android.support.constraint.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:minHeight="?android:attr/listPreferredItemHeight"
    android:paddingBottom="12dp"
    android:paddingLeft="16dp"
    android:paddingRight="16dp"
    android:paddingTop="12dp">
	
    <ImageView
        android:id="@+id/weather_icon"
        android:layout_width="40dp"
        android:layout_height="40dp"
        app:layout_constraintBottom_toTopOf="@+id/guideline"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toTopOf="@+id/guideline"
        tools:src="@drawable/art_clouds"/>

    <TextView
        android:id="@+id/date"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="16dp"
        android:layout_marginStart="16dp"
        app:layout_constraintBottom_toTopOf="@+id/guideline"
        app:layout_constraintLeft_toRightOf="@+id/weather_icon"
        tools:text="Today, April 03"/>

    <TextView
        android:id="@+id/weather_description"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toLeftOf="@+id/date"
        app:layout_constraintTop_toTopOf="@+id/guideline"
        tools:text="Rainy"/>

    <TextView
        android:id="@+id/high_temperature"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="4dp"
        android:layout_marginRight="4dp"
        android:textSize="28dp"
        app:layout_constraintBottom_toTopOf="@+id/guideline"
        app:layout_constraintRight_toLeftOf="@+id/low_temperature"
        app:layout_constraintTop_toTopOf="@+id/guideline"
        tools:text="19\u00b0"/>

    <TextView
        android:id="@+id/low_temperature"
        android:layout_width="60dp"
        android:layout_height="wrap_content"
        android:gravity="end"
        android:textSize="28dp"
        app:layout_constraintBottom_toBottomOf="@+id/guideline"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="@+id/guideline"
        tools:text="10\u00b0"/>

    <android.support.constraint.Guideline
        android:id="@+id/guideline"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintGuide_percent="0.5"/>

</android.support.constraint.ConstraintLayout>

-----------------
Tips RecyclerView
-----------------

 - Use values-port or values-land, to overrride values in values, based on the orientation of the device.
 - In this exercise we used it to decide to use a diferent layout for todays weather if in portrait mode
 - Recycler view with diferent layouts for the list items
	- Override RecyclerView.getItemViewType() and return the type (an int defined by us)
	- In RecyclerView.onCreateViewHolder() use the type to create a diferent view for each type.

