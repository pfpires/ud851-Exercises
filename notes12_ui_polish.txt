------------------------------------------------------------------------------
LESSON 12 - Polishing the UI
------------------------------------------------------------------------------


---------------
Fonts and Color
---------------

Visual Mocks and Keylines
-------------------------

Keylines define spacing and alignment of components ...


Color Guidelines
----------------

	https://material.io/guidelines/style/color.html#color-color-palette
	https://www.materialpalette.com/
	
	<?xml version="1.0" encoding="utf-8"?>
	<resources>
		<color name="colorPrimary">#673AB7</color>
		<color name="colorPrimaryDark">#512DA8</color>
		<color name="colorAccent">#FF9100</color>
		<color name="colorPrimaryLight">#D1C4E9</color>
	</resources>
	
    <View android:id="@+id/accent"
        android:layout_width="match_parent"
        android:layout_height="48dp"
        android:background="@color/colorAccent"/>
	

Font Guidelines
---------------

	https://material.io/guidelines/style/typography.html#typography-typeface

Default font: Roboto (sans-serif)

Font Famaly - groups of fonts that share similar design characteristics (serif, sans-serif)

	android:fontFamily="sans-serif-medium"
	android:fontFamily="sans-serif"
	android:fontFamily="sans-serif-condensed"
	android:fontFamily="sans-serif-thin"
	android:fontFamily="sans-serif-light"
	android:fontFamily="sans-serif-smallcaps"

Stick to same font famaly and change font color, size, and weight for diferent elements

Scale-Independent Pixels, will stay the same physicat size across different resolution screens,
and will respont to text size global accessibility settings.	

    <TextView
        android:id="@+id/text45"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/thin_italic_45"
        android:textSize="45sp"
        android:fontFamily="sans-serif-thin"
        android:textStyle="italic"/>

		
	
-----------------
Styles and Themes
-----------------

 A "Style" is an xml resource file, separate from the layouts where we can set common visual view properties 
in one place. Then later we can apply that style to any view we want.

 A "Theme" is just a style that is applied to an entire activity or application instead of a single view. It
is created the same way as the style ...

Styles
------

Styles are placed in 

	res/values/styles.xml

    <style name="ActivityLabelStyle">
        <item name="android:layout_width">match_parent</item>
        <item name="android:layout_height">80dp</item>
        <item name="android:gravity">center_vertical</item>
        <item name="android:padding">16dp</item>
        <item name="android:textColor">@android:color/black</item>
        <item name="android:textStyle">bold</item>
        <item name="android:textAppearance">?android:textAppearanceMedium</item>
        <item name="android:layout_marginBottom">8dp</item>
        <item name="android:background">@color/colorPrimaryLight</item>
    </style>

	(NOTE: This ?attr/ format allows you to pull any attribute out of your theme, making it easy to consolidate your theming into a single place and avoid finding/replacing across many files.)

	
Exemple for a folder style (NOTE: drawablePadding is the padding between the drawable icon and the text in a text view)

    <style name="folderStyle">
        <item name="android:layout_width">match_parent</item>
        <item name="android:layout_height">wrap_content</item>
        <item name="android:drawablePadding">8dp</item>
        <item name="android:paddingTop">4dp</item>
        <item name="android:paddingBottom">4dp</item>
        <item name="android:textSize">28sp</item>
        <item name="android:textColor">@android:color/black</item>
    </style>

	<TextView
        style="@style/folderStyle"
        android:drawableStart="@drawable/ic_sent"
        android:drawableLeft="@drawable/ic_sent"
        android:text="@string/sent" />

 You can have style hierarchy, by specifying the parent. The child style inherits all the parents properties
and can add new properties or override existing ones.

    <style name="inboxStyle" parent="folderStyle">
        <item name="android:textStyle">bold</item>
    </style>

Themes
------

In styles.xml define a base app style/theme:

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>

Android provides the following base themes that we can extend and customize:

	Theme.AppCompat.Light.DarkActionBar
	

Then in the AndroidManifest.xml, assign the style as a theme to the app or single activities:

	<?xml version="1.0" encoding="utf-8"?>
	<manifest xmlns:android="http://schemas.android.com/apk/res/android"
		package="com.example.android.visualpolish">
		<application
			android:allowBackup="true"
			android:icon="@mipmap/ic_launcher"
			android:label="@string/app_name"
->			android:supportsRtl="true"
			android:theme="@style/AppTheme">
			<activity android:name=".MainActivity">
				<intent-filter>
					<action android:name="android.intent.action.MAIN" />
					<category android:name="android.intent.category.LAUNCHER" />
				</intent-filter>
			</activity>
			<activity
->				android:theme="@style/inboxStyle"
				android:name=".ColorFontActivity"
				android:label="@string/color_font_name" />
		</application>
	</manifest>


------------------------------
Designing for Multiple Screens
------------------------------

Density - Number of pixels in the physical area of the screen, and it's often measured in dots per inch or "dpi".

Density Buckets
---------------

 - mdpi    (~160dpi) - medium
 - hdpi    (~240dpi) - high
 - xhdpi   (~320dpi) - extra-high
 - xxhdpi  (~480dpi) - extra-extra-high
 - xxxhdpi (~640dpi) - extra-extra-extra-high
 
Density Independent Pixels
--------------------------

Density Independent Pixels, or "dips" / "dp" for short, are the same physical size on each device.

Use dps for images and spacing, and provide images in several sizes ...


Resource Folder Qualifiers
--------------------------

	res/
		values/
		layout/
		values-fr/					// Country
		values-fr-rCA/				// Country + Region
		layout-desk/				// Device docked
		layout-stylus/				// Device with stylus
		drawable-xhdpi/				// Screen density
		layout-land/				// Device in landscape mode
		layout-port/				// Device in portrait mode
		layout-sw720dp/				// Smallest available screen width
		
Alternative resource folders have the same folder name, a - ,followed by a qulifier
Use values-<language>/strings.xml to provide localized string resources, translations. Goople Play publisher services can provide translations.

Smallest Width Qualifier
------------------------

As of android 3.2, density buckets are deprecated, and the smallest width qualifier should be used instead.

	Smallest Width Qualifier
		-sw<size in dp>

Resources will be pulled from the most specific directory, and if not found there, they will be pulled
from the second most specific directory, and so on ... all the way to the general directory.

	res/
		layout/
			activity_main.xml
			detail_activity.xml
			list_item.xml
		layout-sw600dp/
			detail_activity.xml
			list_item.xml
		layout-sw720dp/
			list_item.xml

Nexus 5 -> 360dp x 640dp - smallest width is 360dp, thus it will get all files from the layout folder (360 < 600 and 360 < 720)
Nexus 7 2013 -> 600dp x 960dp - smallest width is 600dp, thus it will get list_item.xml and detail_activity.xml from the layout-sw600dp/ folder, and the activity_main.xml file from the layout/ folder.
Nexus 10 -> 1280dp x 800dp - smallest width is 800dp, thus it will get list_item.xml from the layout-sw720dp/ folder, detail_activity.xml from the layout-sw600dp/ folder, and activity_main.xml from the layout/ folder.

Besides layouts, the smallest width qualifier can also be used for values/ folders.

	right-click res/ -> New -> Android Resource Directory
	choose resource type, and a qualifier from the available qualifiers

NOTE: 600dp is the usual cutoff for 7'' tablets

---------------
Touch Selectors
---------------

	right-click res/ -> New -> Android Resource File
	choose "Drawable" as the resource type, "selector" as the root element
	give it a name (list_item_selector.zml)
	
	<?xml version="1.0" encoding="utf-8"?>
	<selector xmlns:android="http://schemas.android.com/apk/res/android">
		<item android:drawable="@color/colorPrimaryLight" android:state_pressed="true" />
		<item android:drawable="@color/colorPrimaryLight" android:state_activated="true" />
		<item android:drawable="@color/colorPrimaryLight" android:state_selected="true" />
		<item android:drawable="@android:color/background_light" />
	</selector>
	
(NOTE: The last item is the default, thus  it has no state attribute. It will match all states not specified in the other items)

Then in the view that represents each list item, assign the drawable selector to the backgound property.


	<?xml version="1.0" encoding="utf-8"?>
	<LinearLayout 
		xmlns:android="http://schemas.android.com/apk/res/android"
		android:orientation="vertical"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
->		android:background="@drawable/list_item_selector">
		<!-- ... -->
	</LinearLayout>

	
---------------
Tips
---------------

Screen margins as per Android Design guidelines:

    <!-- Default screen margins, per the Android Design guidelines. -->
    <dimen name="forecast_detail_horizontal_padding">32dp</dimen>
    <dimen name="forecast_detail_vertical_padding">16dp</dimen>

Screen margins sw600dp (7'' tablets and over)
	
	<dimen name="forecast_detail_vertical_padding">24dp</dimen>
	
Screen margins for landscape:

    <dimen name="forecast_detail_horizontal_padding">16dp</dimen>
    <dimen name="forecast_detail_vertical_padding">44dp</dimen>

Changing the default action bar to display a logo instead of a title:

	<resources>
		<style name="AppTheme" parent="@style/Theme.AppCompat.Light.DarkActionBar">
			<item name="colorPrimary">@color/colorPrimary</item>
			<item name="colorPrimaryDark">@color/colorPrimaryDark</item>
			<item name="colorAccent">@color/colorAccent</item>
			<item name="preferenceTheme">@style/PreferenceThemeOverlay</item>
		</style>
		<style name="ActionBar.Solid.Sunshine.NoTitle" parent="@style/Widget.AppCompat.Light.ActionBar.Solid.Inverse">
			<item name="displayOptions">useLogo|showHome</item>
			<item name="logo">@drawable/ic_logo</item>
		</style>
		<style name="AppTheme.Forecast" parent="@style/AppTheme">
			<item name="actionBarStyle">@style/ActionBar.Solid.Sunshine.NoTitle</item>
		</style>
	</resources>

----------
What Next?
----------

Since you've completed the most up to date version of Developing Android apps, you'll find that some content is Developing Advanced Android Apps is a repeat. The most important lessons for you to watch through are:

	Product Quality
	Integration Points and Error Cases
	Accessibility and Localization
	Libraries
	Places
	Building a Total Experience
	Publishing your app.
	
If you are enrolled in the Nanodegree program, you'll first want to complete the next project, before moving on to our Developing Advanced Android Apps course.

If you are not, go straight to the next class to continue learning!

	https://www.udacity.com/course/advanced-android-app-development--ud855
	
