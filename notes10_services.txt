------------------------------------------------------------------------------
LESSON 10 - Services
------------------------------------------------------------------------------

Activity
Content Provider
Service
Broadcast Receiver


Services vs Loaders
-------------------

LOADER:
 
 - Loaders are tied to the Activity lifecycle
 - Easier to make UI changes and communicate with activity
 - Good candidates are:
   - Query DB to populate RecyclerViewAdapter
   - Decode an image to populate an ImageView
 
SERVICE:

 - Decoupled from the UI
 - Exists when there is no UI
 - Good candidates are:
   - Updating a DB in the background
	 
Starting Services
-----------------

 - Start (a service manually)
 - Schedule (a service)
 - Bind (to a service)
 
START SERVICE:

 - Context.startService(); // Or Activity
 - Service starts but does not interact with the activity again (fire and forget)
 - These are called started services

SCHEDULE SERVICE:

 - JobService
 - JobScheduler (Or FirebaseJobDispatcher)
 - Allow for complex schedules (like run every 24h while on wifi)
 
BOUND SERVICES:

                       --------------
 Service as a          |   Service  |
 "Server"              --------------
                            |  A
                            |  |
                            |  |
                            V  |
                       --------------
 Component as a        |  Activity  |------> bindService()
 "client"              --------------
 
 - These are called bound services
 - Component binds to service
 - Client server model
 - Allows for 2way comunication
 - A service can be both bound and started
 - https://developer.android.com/guide/components/bound-services.html

---------------- 
STARTED SERVICES
----------------

   -----------------------------------------------------------------
   |  All Android core components (activities, content providers,  |
   | services and broadcast receivers) start on the main thread!!! |
   -----------------------------------------------------------------

BASE SERVICE CLASS
------------------
   
 - The base abstract Service class runs in the main thread
 - Need to create a background task or AsynchTask from within the service
 
Started Service Liffecycle:

  - Call to startService()
  
  - Triggers Service.onCreate()
  
  - Service.onStartCommand() is called
  
  - Should span a thread (AsynchTask) and do the long running work in onStartCommand ...
  
  - SERVICE IS RUNNING
  
  - Call stopSelf() when done (service is stopped by itself or a client)
  
  - Triggers Service.onDestroy()
  
  - SERVICE IS DESTROYED

INTENT SERVICE
--------------

 - Runs on its own thread, no new to start one owerselves
 - Extend IntentService and overide onHandleIntent()
 - Started simmilarly to an activity
 
	Intent intent = new Intent(this,MyActivity.class);
	startActivity(intent);
	
	Intent intent = new Intent(this,MyIntentService.class);
	startService(intent);
	
 - Can pass info in
 
	public class MyIntentService extends IntentService {
		@Override
		protected void onHandleIntent(Intent intent) {
			// Do background work here ...
		}
	}
	Intent intent = new Intent(this,MyIntentService.class);
	intent.setAction("My action ...");
	startService(intent);
 
 - All Intent services run onHandleIntent in a backgroud thread, but they all run it on the same backgound thread!
 - They run in order ... good for activities that need to occur in sequence ...
 

REGISTER IN ANDROID MANIFEST
----------------------------

	<?xml version="1.0" encoding="utf-8"?>
	<manifest xmlns:android="http://schemas.android.com/apk/res/android"
			  package="com.example.android.background">
		<application
			android:allowBackup="true"
			android:icon="@mipmap/ic_launcher"
			android:label="@string/app_name"
			android:supportsRtl="true"
			android:theme="@style/AppTheme">
			<!-- ... -->
			<service
				android:name=".sync.WaterReminderIntentService"
				android:exported="false" />
		</application>
	</manifest>
 
-------------
NOTIFICATIONS
-------------

	https://developer.android.com/guide/topics/ui/notifiers/notifications.html
	https://material.io/guidelines/patterns/notifications.html

 - JELLYBEAD: Actions
 - LOLIPOP: New template types + heads up notifications + android wear
 - NOUGAT: changes layout to allways specify the app sending the notification, allows for inline replies and adds the ablity to specify custom layouts for headsup and custom notifications
 
 - Notifications on Android are displayed by a system service called NotificationManager
 - System services are separate processes that are started by the Android system itself

 
PENDING INTENTS
---------------

	https://developer.android.com/reference/android/app/PendingIntent.html

 - Regular intents allow an app to launch activities within the same app of from other apps, either explicitly or implicitly
 - Launching other apps or services from another app, requires the manifest to include the appropriate permissions
 - Pending intent is a wrapper arrount an intent that is designed to be used by another application
 - It gives the other application the ability to perform the included action as is it were the application that gemerated 
  the pending intent, with all the permissions the later has been granted
    - It can launch services, private activities and broadcast protected intents
	- Even if the target application is no longer running
 - Usefull to start activities from notifications
 
 - Create with:
	PendingIntent.getActivity(Context context, int requestCode, Intent intent, int flags)
		- Context in which the pending intent shoud start the activity
		- requestCode private requestCode for the sender, make sure it is unique per pending intent
		- Intent to run in our app 
		- flags - what to do when we have several pending intents for the same intent ... update or cancel current ...
	PendingIntent.getService()
	PendingIntent.getBroadcast()
	
NOTIFICATIONS
-------------

	https://developer.android.com/training/notify-user/build-notification.html
	https://developer.android.com/training/notify-user/expanded.html
	https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html
 
    <uses-permission android:name="android.permission.VIBRATE"/>

	public class NotificationUtils {
		private static final int WATER_REMINDER_PENDING_INTENT_ID = 123;
		private static final int WATER_REMINDER_NOTIFICATION_ID = 33423;
		// https://developer.android.com/training/notify-user/build-notification.html
		public void remindUserBecauseCharging(Context context) {
			NotificationCompat.Builder builder = new NotificationCompat.Builder(context)
					.setColor(ContextCompat.getColor(context,R.color.colorPrimary))
					.setSmallIcon(R.drawable.ic_drink_notification)
					.setLargeIcon(largeIcon(context))
					.setContentTitle(context.getString(R.string.charging_reminder_notification_title))
					.setContentText(context.getString(R.string.charging_reminder_notification_body))
					.setStyle(new NotificationCompat.BigTextStyle().bigText(context.getString(R.string.charging_reminder_notification_body)))
					.setDefaults(Notification.DEFAULT_VIBRATE)
					.setContentIntent(contentIntent(context))
					.setAutoCancel(true);   // auto cancel - Cancels the notification when the users clicks on it
			if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN) {
				builder.setPriority(Notification.PRIORITY_HIGH);
			}
			NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
			notificationManager.notify(WATER_REMINDER_PENDING_INTENT_ID,builder.build());
		}
		private PendingIntent contentIntent(Context context) {
			Intent intent = new Intent(context, MainActivity.class);
			return PendingIntent.getActivity(context,WATER_REMINDER_NOTIFICATION_ID,intent,PendingIntent.FLAG_UPDATE_CURRENT);
		}
		private static Bitmap largeIcon(Context context) {
			return BitmapFactory.decodeResource(context.getResources(), R.drawable.ic_local_drink_black_24px);
		}
	}

    public static void clearAllNotifications(Context context) {
        NotificationManager notificationManager = (NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.cancelAll();
    }

	
NOTIFICATION ACTIONS
--------------------
	


	
    public static NotificationCompat.Action drinkWaterAction(Context context) {
        Intent intent = new Intent(context, WaterReminderIntentService.class);
        intent.setAction(ReminderTasks.ACTION_INCREMENT_WATER_COUNT);
        PendingIntent pendingIntent = PendingIntent.getService(
                context,
                ACTION_DRINK_PENDNG_INTENT_ID,
                intent,
                PendingIntent.FLAG_CANCEL_CURRENT);
        NotificationCompat.Action action = new NotificationCompat.Action(
                R.drawable.ic_local_drink_black_24px,
                "I did it!",
                pendingIntent
        );
        return action;
    }
	

	NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(context)
			.setColor(ContextCompat.getColor(context, R.color.colorPrimary))
			.setSmallIcon(R.drawable.ic_drink_notification)
			.setLargeIcon(largeIcon(context))
			.setContentTitle(context.getString(R.string.charging_reminder_notification_title))
			.setContentText(context.getString(R.string.charging_reminder_notification_body))
			.setStyle(new NotificationCompat.BigTextStyle().bigText(
					context.getString(R.string.charging_reminder_notification_body)))
			.setDefaults(Notification.DEFAULT_VIBRATE)
			.setContentIntent(contentIntent(context))
			// TODO (17) Add the two new actions using the addAction method and your helper methods
			.addAction(drinkWaterAction(context))
			.addAction(ignoreReminderAction(context))
			.setAutoCancel(true);
 
	// Can call setAction up to 3 times on the builder
 
 
--------------------------


-------------------
FOREGROUND SERVICES
-------------------
 
 - Service that the user is activelly aware of via a non-dismissable ongoing notification
 - Android will prioritize foreground services even if the system is memory constrained
 - Examples: google maps or google play music

--------------------
APPLICATION PRIORITY
--------------------

CRITICAL      | Active Apps
              | Foreground Services

HIGH          | Visible Processes

MEDIUM        | Service Processes

LOW           | Background Processes
              | Empty Processes

 - Within each bucket the apps are prioritized in a queue
   - App that is in the lowest priority for the longuest the first in line to be executed

   
 1 - Android will keep all apps that interact with the user running smoothly
 2 - Android will keep all apps with visible activities, followed by services, running. Unless this volates 1.
 3 - Android will keep all apps in the background running. Unless this volates 1.

------------
JobScheduler
------------

 - Introduced in Android L (Lolypop)
 - Compatible with API 21 and onwards ...

	JobScheduler js = (JobScheduler)context.getSystemSevice(Context.JOB_SCHEDULER_SERVICE);
	JobInfo job = new JobInfo.Builder(MY_BACKGROUND_JOB,new ComponentName(context,MyJobService.class))
		.setRequiredNetworkType(JobInfo.NETWORK_TYOE_UNMETERED)
		.setRequiresCharging(true)
		.setBackoffCriteria(TWO_MINUTES,BACKOFF_POLICY_EXPONENCIAL)
		.setMinimumLatency(FIFTEEN_MINUTES)
		.build();
	js.schedule(job)

---------------------
FirebaseJobDispatcher
---------------------

	https://github.com/firebase/firebase-jobdispatcher-android

 - Compatible with API 9 (Gingerbread) and onwards ...
 
	compile 'com.firebase:firebase-jobdispatcher:0.8.0'
	
	Driver driver = new GooglePlayDriver(context);
	FirebaseJobDispatcher dispatcher = new FirebaseJobDispatcher(driver);
	Job myJob = dispatcher.newJobBuilder()
		// the JobService that will be called
		.setService(MyJobService.class)
		// uniquely identifies the job
		.setTag("complex-job")
		// one-off job
		.setRecurring(false)
		// don't persist past a device reboot
		.setLifetime(Lifetime.UNTIL_NEXT_BOOT)
		// start between 0 and 15 minutes (900 seconds)     
		.setTrigger(Trigger.executionWindow(0, 900))	// Start netween 0 secs from now and 900 secs from now.
		// overwrite an existing job with the same tag
		.setReplaceCurrent(true)
		// retry with exponential backoff 
		.setRetryStrategy(RetryStrategy.DEFAULT_EXPONENTIAL)
		// constraints that need to be satisfied for the job to run
		.setConstraints(
			// only run on an unmetered network
			Constraint.ON_UNMETERED_NETWORK,
			// only run when the device is charging
			Constraint.DEVICE_CHARGING
		)
		.build(); 
 

--------------------------------
--------------------------------

	<service
		android:name=".sync.WaterReminderFirebaseJobService"
		android:exported="false">
		<intent-filter>
			<action android:name="com.firebase.jobdispatcher.ACTION_EXECUTE"/>
		</intent-filter>
	</service>

	public class WaterReminderFirebaseJobService extends JobService {
		private AsyncTask mBackgroundTask;
		@Override
		public boolean onStartJob(final JobParameters job) {
			mBackgroundTask = new AsyncTask() {
				@Override
				protected Object doInBackground(Object[] params) {
					ReminderTasks.executeTask(WaterReminderFirebaseJobService.this, ReminderTasks.ACTION_CHARGING_REMINDER);
					return null;
				}
				@Override
				protected void onPostExecute(Object o) {
					jobFinished(job, false);
				}
			};
			mBackgroundTask.execute();
			return true;	// true means that we are still doing some work after returning (in another thread)
		}
		@Override
		public boolean onStopJob(JobParameters job) {
			if (mBackgroundTask == null) {
				mBackgroundTask.cancel(true);
			}
			return true; // true means - when conditions are met, job should be retried
		}
	}

    public static synchronized void scheduleChargingReminder(Context context) {
        if (sInitialized) {
            return;
        }
        Driver driver = new GooglePlayDriver(context);
        FirebaseJobDispatcher dispatcher = new FirebaseJobDispatcher(driver);
        Job myJob = dispatcher.newJobBuilder()
                .setService(WaterReminderFirebaseJobService.class)
                .setTag(REMINDER_JOB_TAG)
                .setConstraints(Constraint.DEVICE_CHARGING)
                .setLifetime(Lifetime.FOREVER)
                .setRecurring(true)
                .setTrigger(Trigger.executionWindow(REMINFER_INTERVAL_SECONDS, REMINFER_INTERVAL_SECONDS + SYNC_FLEXTIME_SECONDS))
                .setReplaceCurrent(true)
                .build();
        dispatcher.schedule(myJob);
        sInitialized = true;
    }

	Call ReminderUtilities.scheduleChargingReminder(this); from Activity onCreate ...


-------------------
BROADCAST RECEIVERS
-------------------

 - System Broadcast Intents:
	- special intents sent by the system when an event occurs on the phone

	android.intent.action.SCREEN_ON
	android.intent.action.MEDIA_MOUNTED
	android.intent.action.HEADSET_PLUG
	android.intent.action.BATTERY_LOW
	android.intent.action.DOWNLOAD_COMPLETE
	android.intent.action.AUDIO_BECOMING_NOISY

 - Broadcast Receiver:
	- Core android component that enables applications to receive intents that are broadcast by the system or by other applications
	- Can be triggered even when the app is not running
	
 - Intent Filter:
	- Expression that says what intetns should trigger a component
	- Are used to specify which broadcasts the app is interested in
	- Are declared in the manifest
	- Are not specific to broadcast receivers (activities also have them)
	
 - Static Broadcast Receivers
	- Are triggered whenever the broadcast intent occurs
	- Receiver will be trigggered even if the app is offline
	- Broadcast intents that have the flag FLAG_RECEIVER_REGISTERED_ONLY won't let us statically define a broadcast receiver
 - Dynamic Broadcast Receivers
	- Are tied to the app«s lifecycle
	- Best to use these (or JobScheduling if possible)


 - To execute code when the app isn't running
	- Schedule a job if possible
	- In some cases, for some events adn some old devices, a static broadcast receiver might be needed
 - To execute code when the app is running
	- Use a dynamic broadcast receiver
	
Register a Static Broadcast Receiver
------------------------------------

	<receiver android:name=".NewPictureBroadcastReceiver">
		<intent-filter>
			<action android:name="com.android.camera.NEW_PICTURE" />
			<action android:name="android.hardware.action.NEW_PICTURE" />
			<data android:mimeType="image/*" />
		</intent-filter>
	</receiver>
	
	public class NewPictureBroadcastReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			// Do Stuff ...
		}
	}
	
 
Register a dynamic Broadcast Receiver
-------------------------------------


	public class HeadSetReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			// Do Stuff ...
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		IntentFilter rceiveFilter = new IntentFilter(Intent.ACTION_HEADSET_PLUG);
		mReceiver = new HeadSetReceiver();
		registerReceiver(mReceiver, receiveFilter);
	}

	@Override
	protected void onPause() {
		super.onPause();
		unregisterReceiver(mReceiver);
	}
















--------------------------
SIDE NOTE - Charging State
--------------------------

	https://developer.android.com/training/monitoring-device-state/battery-monitoring.html

	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
		BatteryManager batteryManager = (BatteryManager) getSystemService(BATTERY_SERVICE);
		boolean isCharging = batteryManager.isCharging();
	} else {
		IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
		Intent batteryStatus = registerReceiver(null, ifilter);	// null as the receiver, forces android to return the sticky intent immediatly
		int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS,0);
		boolean isCharging = ((status == BatteryManager.BATTERY_STATUS_CHARGING) || (status == BatteryManager.BATTERY_STATUS_FULL));
	}


--------------------------------------
SIDE NOTE - ADB - Android Debug Bridge
--------------------------------------

Setup ADB
The Android Debug Bridge, or adb as it is affectionately called, is a command line tool. This means that you should be comfortable working in a terminal or shell to use this program. We touched on it briefly in the first lesson. The adb program is stored in your android SDK folder in a subfolder called platform-tools. You can find where your SDK is by going to the SDK manager and looking at the SDK location, as shown below:

Once you have the sdk location, you can use adb by typing:

<YOUR SDK LOCATION>/platform-tools/adb
If you've added commands to your $PATH before, adb is a great one to add.

Helpful adb Commands
To simulate the phone being unplugged from usb charging you can use:

adb shell dumpsys battery set usb 0
or if you're on a device Android 6.0 or higher you can use:

adb shell dumpsys battery unplug
To "plug" the phone back in, just reset it's charging status using:

adb shell dumpsys battery reset

 
--------------------------------
SIDE NOTE - Google Play Services
--------------------------------

What is Google Play Services
You might be wondering what's up with the GooglePlayDriver. FirebaseJobDispatcher has a dependency on Google Play Services, which is why you need a GooglePlayDriver. So what is Google Play Services?

Google Play Services is app that Google maintains which comes pre-installed on and runs in the background on many, many phones. It is essentially a collection of Services that your app can use to leverage the power of Google products. If the user has the Google Play Services apk installed (and many do) you can use Google Play Services Libraries to easily do things like use the Places API to know where your user is or integrate Google sign in. FirebaseJobDispatcher is one of the many services you can take advantage of via Google Play Services.

Google choose to distribute these services as an installable apk so that updates to the services are not dependent on carrier or OEM system image updates. In general, devices running Android 2.3 (API level 9) or later and have the Google Play services app installed receive updates within a few days.

Installing Google Play Services
To test your app when using the Google Play services SDK, you must use either:

A compatible Android device that runs Android 2.3 or higher and includes Google Play Store.
The Android emulator with an AVD that runs the Google APIs platform based on Android 4.2.2 or higher.
You can install Google Play Services on your physical device via the Google Play Store.

To get Google Play Services on an emulator, you first need to make sure you have Google Play Services installed in the SDK manager:

Then you need to create an emulator that uses the Google APIs:

What if Google Play Services is not Available?
In this class we are only covering FirebaseJobDispatcher. Depending on where you're located and who your users are, you might not have access to the Play Store to download Google Play Services. If this is the case, you can use an alternative to FirebaseJobDispatcher known as android-job. Android-job is very similar to FirebaseJobDispatcher, but it is not a Google maintained repository and it only offers compatibility back to API 14. The FirebaseJobDispatcher documentation contains a comparison table that you can use when making this decision.

------------------------------ 

-------------------------
SIDE NOTE - PLURALIZATION
-------------------------

	https://developer.android.com/guide/topics/resources/string-resource.html#Plurals

	
Pluralization in Android

Part of Android’s robust resource framework involves a mechanism for pluralizing strings called “Quantity Strings”. In the strings.xml file for the Hydration Reminder app, you’ll see an example of how pluralization can be used:

<plurals name="charge_notification_count">
   <item quantity="zero">Hydrate while charging reminder sent %d times</item>
   <item quantity="one">Hydrate while charging reminder sent %d time</item>
   <item quantity="other">Hydrate while charging reminder sent %d times</item>
</plurals>
When you use the plural in code, you specify a quantity number. This number specifies what string should be used. In this case:

if the number is zero, use <item quantity="zero">
If the number is one, use <item quantity="one">
otherwise use <item quantity="other">
Then in the MainActivity we have the following Java code to generate the correct String:

String formattedChargingReminders = getResources().getQuantityString(R.plurals.charge_notification_count, chargingReminders, chargingReminders);
The first usage of chargingReminder is the quantity number. It determines which version of the pluralized string to use (you must pass in a number). The second usage of chargingReminder is the number that’s actually inserted into the formatted string.

---------------------------------------------------
SIDE NOTE - UDACITY COURSES ON GOOGLE PLAY SERVICES
---------------------------------------------------

https://www.udacity.com/course/add-google-maps-to-your-android-app--ud876-4
https://www.udacity.com/course/google-location-services-on-android--ud876-1
https://www.udacity.com/course/google-analytics-for-android--ud876-2
https://www.udacity.com/course/monetize-your-android-app-with-ads--ud876-3


