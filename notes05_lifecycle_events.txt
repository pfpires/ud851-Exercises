----------------------------
LESSON 05 - Lifecycle Events
----------------------------

OnCreate -> OnStart -> OnResume
OnPause -> OnStop -> OnDestroy

O screen rotate, activity is destroyed an recreated (by default):

OnPause -> OnStop -> OnDestroy -> OnCreate -> OnStart -> OnResume


Pressed home (no ondestroy, onRestart instead of on create):

OnPause -> OnStop

Resumes after pressing home (onRestart instead of on create):

OnRestart -> OnStart -> OnResume

This means that our activity was momentarily not displayed and then was 
displayed again, without being re-created.

--------------------------------------

    /**
     * Called when the activity is first created. This is where you should do all of your normal
     * static set up: create views, bind data to lists, etc.
     *
     * Always followed by onStart().
     *
     * @param savedInstanceState The Activity's previously frozen state, if there was one.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mLifecycleDisplay = (TextView) findViewById(R.id.tv_lifecycle_events_display);

        // TODO (1) Use logAndAppend within onCreate
        logAndAppend("ON_CREATE");
    }

    // TODO (2) Override onStart, call super.onStart, and call logAndAppend with ON_START
    @Override
    protected void onStart() {
        super.onStart();
        logAndAppend("ON_START");
    }

    // TODO (3) Override onResume, call super.onResume, and call logAndAppend with ON_RESUME
    @Override
    protected void onResume() {
        super.onResume();
        logAndAppend("ON_RESUME");
    }

    // TODO (4) Override onPause, call super.onPause, and call logAndAppend with ON_PAUSE
    @Override
    protected void onPause() {
        super.onPause();
        logAndAppend("ON_PAUSE");
    }

    // TODO (5) Override onStop, call super.onStop, and call logAndAppend with ON_STOP
    @Override
    protected void onStop() {
        super.onStop();
        logAndAppend("ON_STOP");
    }

    // TODO (6) Override onRestart, call super.onRestart, and call logAndAppend with ON_RESTART
    @Override
    protected void onRestart() {
        super.onRestart();
        logAndAppend("ON_RESTART");
    }

    // TODO (7) Override onDestroy, call super.onDestroy, and call logAndAppend with ON_DESTROY
    @Override
    protected void onDestroy() {
        super.onDestroy();
        logAndAppend("ON_DESTROY");
    }

    /**
     * Logs to the console and appends the lifecycle method name to the TextView so that you can
     * view the series of method callbacks that are called both from the app and from within
     * Android Studio's Logcat.
     *
     * @param lifecycleEvent The name of the event to be logged.
     */
    private void logAndAppend(String lifecycleEvent) {
        Log.d(TAG, "Lifecycle Event: " + lifecycleEvent);

        mLifecycleDisplay.append(lifecycleEvent + "\n");
    }

	
-----------------------------------------


    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        logAndAppend("ON_SAVE_INSTANCE_STATE");
        outState.putString(ON_SAVE_INSTANCE_STATE,mLifecycleDisplay.getText().toString());
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mLifecycleDisplay = (TextView) findViewById(R.id.tv_lifecycle_events_display);

        // TODO (6) If savedInstanceState is not null and contains LIFECYCLE_CALLBACKS_TEXT_KEY, set that text on our TextView
        if (savedInstanceState != null && savedInstanceState.containsKey(LIFECYCLE_CALLBACKS_TEXT_KEY)) {
            mLifecycleDisplay.setText(savedInstanceState.getString(LIFECYCLE_CALLBACKS_TEXT_KEY));
        }

        logAndAppend(ON_CREATE);
    }
	
--------------------------------------------------------

When we hit home and re-launch the app, we get an extra state, onRestart. 
This means that our activity was momentarily not displayed and then was 
displayed again, without being re-created.

---------------------------------------------------------

LOADERS:

public class MainActivity extends AppCompatActivity 
implements LoaderManager.LoaderCallbacks<String> {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

		getSupportLoaderManager().initLoader(GITHUB_SEARCH_LOADER,null,this);
	}

Activity implement
	implements LoaderManager.LoaderCallbacks<String>
On Activity.onCreate Call
	getSupportLoaderManager().initLoader(GITHUB_SEARCH_LOADER,null,this);
In the button / action where you wanto to make a network call:

        Bundle queryBundle = new Bundle();
        queryBundle.putString(SEARCH_QUERY_URL_EXTRA,githubSearchUrl.toString());
        LoaderManager loaderManager = getSupportLoaderManager();
        Loader<String> loader = loaderManager.getLoader(GITHUB_SEARCH_LOADER);
        if (loader == null) {
            loaderManager.initLoader(GITHUB_SEARCH_LOADER,queryBundle,this);
        } else {
            loaderManager.restartLoader(GITHUB_SEARCH_LOADER,queryBundle,this);
        }

In Activity.onCreateLoader (from the LoaderManager.LoaderCallbacks interface)
    public Loader<String> onCreateLoader(int id, final Bundle args) {
        return new AsyncTaskLoader<String>(this){
            @Override
            protected void onStartLoading() {
                super.onStartLoading();
                if (args == null) {
                    return;
                }
                mLoadingIndicator.setVisibility(View.VISIBLE);
                forceLoad();
            }

            @Override
            public String loadInBackground() {
                String urlString = args.getString(SEARCH_QUERY_URL_EXTRA);
                if (urlString == null || TextUtils.isEmpty(urlString)) {
                    return null;
                }
                String githubSearchResults = null;
                try {
                    githubSearchResults = NetworkUtils.getResponseFromHttpUrl(new URL(urlString));
                } catch (IOException e) {
                    Log.e(MainActivity.class.getSimpleName(),"Error calling the network",e);
                }
                return githubSearchResults;
            }
        };
	}
	
	
-----

onCreate()
	initLoader()
		onCreateLoader()
			loadInBackground()
			
			.... device rotates ....
			
				initLoader()
					onLoadFinished()
				

In Activity.onLoadFinished (from the LoaderManager.LoaderCallbacks interface)
    public void onLoadFinished(Loader<String> loader, String data) {
		// data contains the results ... check for error and display them in the ui
	}
-----------------

CACHE data on loaders (so that if users goes away from activity and back it doesn't call the network again)

create var in AsyncTaskLoader to cache the data
            String mGithubJson;
in AsyncTaskLoader.onStartLoading()
                if (mGithubJson != null) {
                    deliverResult(mGithubJson);
                } else {
					forceLoad();
				}
in AsyncTaskLoader created on activity on create:
            @Override
            public void deliverResult(String data) {
                mGithubJson = data;
                super.deliverResult(data);
            }

			
----------------------------------------------------------------------------

Supporting Multiple Screens:
https://developer.android.com/guide/practices/screens_support.html

AsyncTask
https://developer.android.com/reference/android/os/AsyncTask.html

Requesting Permissions
https://developer.android.com/guide/topics/permissions/requesting.html

System Permissions
https://developer.android.com/guide/topics/permissions/index.html

OkHttp
http://square.github.io/okhttp/

Providing Resources
https://developer.android.com/guide/topics/resources/providing-resources.html

Drawable Resources
https://developer.android.com/guide/topics/resources/drawable-resource.html

String Resources
https://developer.android.com/guide/topics/resources/string-resource.html

Read/convert an InputStream to a String
https://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string

Using ConstraintLayout to design your views
https://codelabs.developers.google.com/codelabs/constraint-layout/#0

Log
https://developer.android.com/reference/android/util/Log.html

https://api.github.com/search/repositories?q=android&sort=stars

AsyncTask
https://developer.android.com/reference/android/os/AsyncTask.html

Support Library Packages
https://developer.android.com/topic/libraries/support-library/packages.html

Common Intents
https://developer.android.com/guide/components/intents-common.html#Maps

ShareCompat.IntentBuilder
https://developer.android.com/reference/android/support/v4/app/ShareCompat.IntentBuilder.html

Providing Up Navigation
https://developer.android.com/training/implementing-navigation/ancestral.html

Adding an Up Action
https://developer.android.com/training/appbar/up-action.html

Loaders
https://developer.android.com/guide/components/loaders.html

LoaderManager
https://developer.android.com/reference/android/app/LoaderManager.html

Loader
https://developer.android.com/reference/android/content/Loader.html


